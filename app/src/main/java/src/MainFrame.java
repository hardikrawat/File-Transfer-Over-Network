/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package src;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.awt.Cursor;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author hardi
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        exitBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        serverBtn = new javax.swing.JButton();
        clientBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        IP1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        prg = new javax.swing.JProgressBar();
        prgStatus = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        IP2 = new javax.swing.JTextField();
        connectionStatus = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        port_num = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setForeground(new java.awt.Color(51, 51, 51));
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("File Transfer System");
        jLabel1.setOpaque(true);

        exitBtn.setBackground(new java.awt.Color(60, 63, 65));
        exitBtn.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        exitBtn.setForeground(new java.awt.Color(255, 0, 0));
        exitBtn.setText("X");
        exitBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Select an Operation : ");

        serverBtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        serverBtn.setText("Send a file");
        serverBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        serverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverBtnActionPerformed(evt);
            }
        });

        clientBtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        clientBtn.setText("Receive a file");
        clientBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Enter Your IP : ");

        IP1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        IP1.setText("192.168.1.?");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("<html><u>Auto Detect / Refresh");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        prgStatus.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        prgStatus.setText("Progress : ");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("<html>Enter 2<sup>nd</sup> device IP : ");

        IP2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        IP2.setText("192.168.1.?");

        connectionStatus.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        connectionStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        connectionStatus.setText("<html><u>Check Connection");
        connectionStatus.setToolTipText("Coming Soon");
        connectionStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        connectionStatus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectionStatusMouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Logs : ");

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        jLabel5.setText(":");

        port_num.setText("3000");
        port_num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                port_numActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(prg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(IP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jLabel5)
                                .addGap(1, 1, 1)
                                .addComponent(port_num, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .addComponent(serverBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                            .addComponent(IP1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(clientBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(connectionStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prgStatus)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(IP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectionStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(port_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverBtn)
                    .addComponent(clientBtn)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prgStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prg, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(111, 111, 111)
                        .addComponent(exitBtn))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitBtn)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    JFileChooser file = new JFileChooser();
    String path = "";
    Socket socket;
    ServerSocket ssock;
//    Thread connectionStatusThread;
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void clientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientBtnActionPerformed
        String filename = JOptionPane.showInputDialog("Save File as : ");
        String ip2 = IP2.getText();
        if (ip2.contains("?")) {
            JOptionPane.showMessageDialog(this, "Please provide a valid IP of <html>2<sup>nd</sup> device");
        } else {
            if (!filename.contains(".") || filename.length() == 0) {
                JOptionPane.showMessageDialog(this, "Please provide Correct file name with extension");
            } else {
                new Thread() {
                    public void run() {
                        try {
                            serverBtn.setEnabled(false);
                            clientBtn.setEnabled(false);
                            IP2.setEnabled(false);
                            logTextArea.append(" > Scanning ...\n");
                            socket = new Socket(InetAddress.getByName(ip2), Integer.parseInt(port_num.getText()));
//                            if (!connectionStatusThread.isAlive()) {
//                                connectionStatusThread.start();
//                            }
                            logTextArea.append(" > Connected to " + socket.getRemoteSocketAddress() + "\n");
                            byte[] contents = new byte[10000];
                            FileOutputStream fos = new FileOutputStream("C:\\Users\\hardi\\Desktop\\" + filename);
                            BufferedOutputStream bos = new BufferedOutputStream(fos);
                            logTextArea.append(" > Waiting to Receive File ...\n");
                            InputStream is = socket.getInputStream();
                            int bytesRead = 0;
                            logTextArea.append(" > Receiving File ...\n");
                            prg.setIndeterminate(true);
                            prg.setString("Receiving File");
                            while ((bytesRead = is.read(contents)) != -1) {
                                bos.write(contents, 0, bytesRead);
                            }
                            bos.flush();
                            is.close();
                            fos.close();
                            socket.close();
                            prg.setIndeterminate(false);
                            prg.setString("");
                            logTextArea.append(" > File Received and Saved Successfully\n");
                        } catch (IOException ex) {
                            logTextArea.append(" > Exception : " + ex.getMessage() + "\n");
                        }
                        serverBtn.setEnabled(true);
                        clientBtn.setEnabled(true);
                        IP2.setEnabled(true);
                    }
                }.start();
            }
        }
    }//GEN-LAST:event_clientBtnActionPerformed

    private void serverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverBtnActionPerformed
        file.setMultiSelectionEnabled(true);
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        file.setFileHidingEnabled(false);
        if (file.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            java.io.File f = file.getSelectedFile();
            path = f.getPath();
            logTextArea.append(" > Selected File : " + path + "\n");
            sendFile();
        } else {
            logTextArea.append(" > File Selection Dialog Cancelled !\n");
        }
    }//GEN-LAST:event_serverBtnActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
//        checkConnectionStatus();
    }//GEN-LAST:event_formWindowActivated

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        try (final DatagramSocket socket = new DatagramSocket()) {
            socket.connect(InetAddress.getByName("8.8.8.8"), Integer.parseInt(port_num.getText()));
            IP1.setText(socket.getLocalAddress().getHostAddress());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    private void connectionStatusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectionStatusMouseClicked
        System.out.println("Checking ...");
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//        checkConnectionStatus();
        new Thread() {
            public void run() {
                sendPingRequest(IP2.getText());
            }
        };
    }//GEN-LAST:event_connectionStatusMouseClicked

    private void port_numActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_port_numActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_port_numActionPerformed

    private void checkConnectionStatus() {
        new Thread() {
            public void run() {
                if (socket != null) {
                    System.out.println("Socket is init");
                    try {
                        if (socket.getInetAddress().isReachable(100)) {
                            connectionStatus.setText("Connected");
                            connectionStatus.setForeground(Color.decode("#33CC00"));
                        } else {
                            connectionStatus.setText("Disconnected");
                            connectionStatus.setForeground(Color.decode("#CC0000"));
                        }
                    } catch (IOException ex) {
                        logTextArea.append(ex.getMessage() + "\n");
                    }
                } else if (ssock != null) {
                    System.out.println("SSOCK is init");
                    try {
                        if (ssock.getInetAddress().isReachable(100)) {
                            connectionStatus.setText("Connected");
                            connectionStatus.setForeground(Color.decode("#33CC00"));
                        } else {
                            connectionStatus.setText("Disconnected");
                            connectionStatus.setForeground(Color.decode("#CC0000"));
                        }
                    } catch (IOException ex) {
                        logTextArea.append(ex.getMessage() + "\n");
                    }
                } else {
                    connectionStatus.setText("Disconnected");
                    connectionStatus.setForeground(Color.decode("#CC0000"));
                    logTextArea.append("Connection not initialzed\n");
                }
            }
        }.start();
    }

    public void sendPingRequest(String ipAddress) {
        try {
            InetAddress geek = InetAddress.getByName(ipAddress);
            System.out.println("Sending Ping Request to " + ipAddress);
            if (geek.isReachable(Integer.parseInt(port_num.getText()))) {
                logTextArea.append(" > Host is reachable\n");
            } else {
                logTextArea.append(" > Sorry ! We can't reach to this host\n");
            }
        } catch (Exception ex) {
            logTextArea.append(" > " + ex.getMessage() + "\n");
        }
    }

    private void sendFile() {
        new Thread() {
            public void run() {
                serverBtn.setEnabled(false);
                clientBtn.setEnabled(false);
                try {
                    logTextArea.append(" > Scanning ...\n");
                    ssock = new ServerSocket(Integer.parseInt(port_num.getText()));
                    Socket socket = ssock.accept();
//                    if (!connectionStatusThread.isAlive()) {
//                        connectionStatusThread.start();
//                    }
                    logTextArea.append(" > Connected to " + socket.getRemoteSocketAddress() + "\n");
                    logTextArea.append(" > Preparing to send ...\n");
                    InetAddress IA = InetAddress.getByName("localhost");
                    File file = new File(path);
                    FileInputStream fis = new FileInputStream(file);
                    BufferedInputStream bis = new BufferedInputStream(fis);
                    OutputStream os = socket.getOutputStream();
                    byte[] contents;
                    long fileLength = file.length();
                    long current = 0;
                    long start = System.nanoTime();
                    logTextArea.append(" > File Prepared, Sending File ...\n");
                    int i = 0;
                    while (current != fileLength) {
                        int size = 10000;
                        if (fileLength - current >= size) {
                            current += size;
                        } else {
                            size = (int) (fileLength - current);
                            current = fileLength;
                        }
                        contents = new byte[size];
                        bis.read(contents, 0, size);
                        os.write(contents);
                        i = (int) ((current * 100) / fileLength);
                        prgStatus.setText("Sending File : " + (current * 100) / fileLength + "%");
                        prg.setValue((int) ((current * 100) / fileLength));
                    }
                    os.flush();
                    socket.close();
                    ssock.close();
                    logTextArea.append(" > File sent succesfully!\n");
                    prgStatus.setText("Progress : ");
                    prg.setValue(0);
                } catch (IOException ie) {
                    logTextArea.append(" > " + ie.getMessage() + "\n");
                    prg.setValue(0);
                    prg.setString("");
                }
                serverBtn.setEnabled(true);
                clientBtn.setEnabled(true);
            }
        }.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IP1;
    private javax.swing.JTextField IP2;
    private javax.swing.JButton clientBtn;
    private javax.swing.JLabel connectionStatus;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JTextField port_num;
    private javax.swing.JProgressBar prg;
    private javax.swing.JLabel prgStatus;
    private javax.swing.JButton serverBtn;
    // End of variables declaration//GEN-END:variables
}
