/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Shubh
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        prg = new javax.swing.JProgressBar();
        jSeparator1 = new javax.swing.JSeparator();
        serverBtn = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        clientBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("File Transfer System");
        jLabel1.setFocusable(false);

        prg.setForeground(new java.awt.Color(102, 102, 102));
        prg.setFocusable(false);
        prg.setString("");
        prg.setStringPainted(true);
prg.setOpaque(true);
prg.setMaximum(100);
prg.setMinimum(0);

        serverBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        serverBtn.setText("Send File");
        serverBtn.setFocusable(false);
        serverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverBtnActionPerformed(evt);
            }
        });

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        clientBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        clientBtn.setText("Recieve File");
        clientBtn.setFocusable(false);
        clientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientBtnActionPerformed(evt);
            }
        });

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        logTextArea.setLineWrap(true);
        logTextArea.setRows(5);
        logTextArea.setFocusable(false);
        jScrollPane1.setViewportView(logTextArea);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Logs:");
        jLabel3.setFocusable(false);

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(prg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(clientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addComponent(serverBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jSeparator3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(serverBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(clientBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        
    JFileChooser file = new JFileChooser();
    String path = "";
    private void clientBtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
        //act as client
        String filename = JOptionPane.showInputDialog("Save File as : ");
        if (!filename.contains(".") || filename.length() == 0) {
            JOptionPane.showMessageDialog(this, "Please provide Correct file name with extension");
        } else {
            new Thread() {
                public void run() {
                    try {
                        serverBtn.setEnabled(false);
                        clientBtn.setEnabled(false);
                        logTextArea.append(" > Scanning ...\n");
                        Socket socket = new Socket(InetAddress.getByName("192.168.1.3"), 5000);
                        logTextArea.append(" > Connected to " + socket.getRemoteSocketAddress() + "\n");
                        byte[] contents = new byte[10000];
                        FileOutputStream fos = new FileOutputStream("C:\\Users\\hardi\\Desktop\\" + filename);
                        BufferedOutputStream bos = new BufferedOutputStream(fos);
                        logTextArea.append(" > Waiting to Receive File ...\n");
                        InputStream is = socket.getInputStream();
                        int bytesRead = 0;
                        logTextArea.append(" > Receiving File ...\n");

			    prg.setIndeterminate(true);
prg.setString("Receiving File");
                        while ((bytesRead = is.read(contents)) != -1) {
                            bos.write(contents, 0, bytesRead);
                        }
                        bos.flush();
                        socket.close();
prg.setIndeterminate(false);
prg.setString("");
                        logTextArea.append("File Received and Saved Successfully");
                    } catch (IOException ex) {
                        logTextArea.append(" > Exception : " + ex.getMessage() + "\n");
                    }
                    serverBtn.setEnabled(true);
                    clientBtn.setEnabled(true);
                }
            }.start();
        }
    }                                         

    private void serverBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // act as server
        file.setMultiSelectionEnabled(true);
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        file.setFileHidingEnabled(false);
        if (file.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            java.io.File f = file.getSelectedFile();
            path = f.getPath();
            logTextArea.append(" > Selected File : " + path + "\n");
            sendFile();
        } else {
            logTextArea.append(" > File Selection Dialog Cancelled !\n");
        }

    }                                         

    private void sendFile() {
        new Thread() {
            public void run() {
                serverBtn.setEnabled(false);
                clientBtn.setEnabled(false);
                try {
                    logTextArea.append(" > Scanning ...\n");
                    ServerSocket ssock = new ServerSocket(5000);
                    Socket socket = ssock.accept();
                    logTextArea.append(" > Connected to " + socket.getRemoteSocketAddress() + "\n");
                    logTextArea.append(" > Preparing to send ...\n");
                    InetAddress IA = InetAddress.getByName("localhost");
                    File file = new File(path);
                    FileInputStream fis = new FileInputStream(file);
                    BufferedInputStream bis = new BufferedInputStream(fis);
                    OutputStream os = socket.getOutputStream();
                    byte[] contents;
                    long fileLength = file.length();
                    long current = 0;
                    long start = System.nanoTime();
                    logTextArea.append(" > File Prepared, Sending File ...\n");
                    int i = 0;
                    while (current != fileLength) {
                        int size = 10000;
                        if (fileLength - current >= size) {
                            current += size;
                        } else {
                            size = (int) (fileLength - current);
                            current = fileLength;
                        }
                        contents = new byte[size];
                        bis.read(contents, 0, size);
                        os.write(contents);
                        i = (int) ((current*100)/fileLength);
                        prg.setString("Sending File : " + (current * 100) / fileLength + "% complete!");
                        //prg.update(prg.getGraphics());
prg.setValue((int)((current * 100) / fileLength));
                    }
                    os.flush();
                    socket.close();
                    ssock.close();
                    logTextArea.append(" > File sent succesfully!\n");
                    prg.setString("");
                    prg.setValue(0);
                } catch (IOException ie) {
                    logTextArea.append(" > " + ie.getMessage() + "\n");
                    prg.setValue(0);
                    prg.setString("");
                }
                serverBtn.setEnabled(true);
                clientBtn.setEnabled(true);
            }
        }.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton clientBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JProgressBar prg;
    private javax.swing.JButton serverBtn;
    // End of variables declaration                   
}
